# Copyright 2010 The Go Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

package stl

type Stl Peg {
 StlFile
}

e <- Header Facet* EndSolid !. commit
Header <- solid Space ( Identifier { p.Name = buffer[begin:end] }
       	  / ) NewLine

Facet <- FacetHeader OuterLoop Vertex Vertex Vertex EndLoop EndFacet
FacetHeader <- Space? facet Space { p.Add() } normal Space Vector NewLine
Vector <- Number Space Number Space Number
OuterLoop <- Space? outerloop NewLine
Vertex <- Space? vertex { p.Vertix() } Space Number Space Number Space Number NewLine
EndLoop <- Space? endloop NewLine
EndFacet <- Space? endfacet NewLine

EndSolid <- Space? endsolid Space ( Identifier { p.EndName = buffer[begin:end] }
	 / ) NewLine

Identifier <- [a-zA-Z]+


# Lexical syntax

solid <- 'solid'
NewLine <- space* ( '\n' / '\r' / '\r\n' )
Number <- [0-9.+-Ee]+ { p.Num(buffer[begin:end]) }
space <- ' '
Space <- space+
facet <- 'facet'
normal <- 'normal'
outerloop <- 'outer loop'
endsolid <- 'endsolid'
endfacet <- 'endfacet'
endloop <- 'endloop'
vertex <- 'vertex'

#e <- s e1 !. commit
#e1 <- e2 ( add e2 { p.AddOperator(TypeAdd) }
#         / minus e2 { p.AddOperator(TypeSubtract) }
#         )*
#e2 <- e3 ( multiply e3 { p.AddOperator(TypeMultiply) }
#         / divide e3 { p.AddOperator(TypeDivide) }
#         / modulus e3 { p.AddOperator(TypeModulus) }
#         )*
#e3 <- e4 ( exponentiation e4 { p.AddOperator(TypeExponentiation) }
#         )*
#e4 <- minus value { p.AddOperator(TypeNegation) }
#    / value
#value <- < [0-9]+ > s { p.AddValue(buffer[begin:end]) }
#       / open e1 close
#add <- '+' s
#minus <- '-' s
#multiply <- '*' s
#divide <- '/' s
#modulus <- '%' s
#exponentiation <- '^' s
#open <- '(' s
#close <- ')' s
#s <- ( ' ' / '\t' )*
